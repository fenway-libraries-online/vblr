#!/usr/bin/perl

use strict;
use warnings;

use MARC::File::USMARC;
use Digest::MD5 qw(md5_hex);

use C4::Context;
#use C4::Biblio;
use C4::ImportBatch;
use C4::Matcher;
#use C4::BackgroundJob;
#use C4::MarcModificationTemplates;
#use Koha::Plugins;

my $salt = sprintf('%d %d %s', time, $$, rand);
# Read records from file
my $fh;

my $f = $batch{'file_name'};

open $fh, '<', $f or fatal("open $f: $!");
binmode $fh;
my ($num_records, $rec_type, $encoding) = preflight($fh);
seek $fh, 0, 0 or fatal("seek to beginning of file $f: $!");


printf('%s/%s/%s/%d', @meta{qw(project update batch)}, $batch_id);

# --- Functions

sub preflight {
    my ($fh) = @_;
    my $n = 0;
    my (%enc2num, %rty2num);
    local $/ = "\x1d";
    while (<$fh>) {
        $n++;
        /^([0-9]{5})/ or fatal("invalid leader in record $n of file $f");
        int($1) == length($_) or fatal("wrong record length in record $n of file $f");
        $rty2num{$rtype{substr($_,6,1)} or fatal("unrecognized record type in record $n of file $f")}++;
        $enc2num{$enc{substr($_,9,1)} or fatal("unrecognized character set encoding in record $n of file $f")}++;
    }
    close $fh;
    fatal("multiple record types in file $f") if scalar(keys %rty2num) > 1;
    fatal("multiple character set encodings in file $f") if scalar(keys %enc2num) > 1;
    return ($n, keys(%rty2num), keys(%enc2num));
}

sub usage {
    print STDERR <<'EOS';
usage: ils.mkjob PARAM...\n";
parameters:
  [rectype=biblio|auth]
  [file=FILE]
  [description=DESCRIP]
  [purpose=add|replace]
  [profile=PROFILE]
EOS
    exit 1;
}

sub fatal {
    print STDERR "ils.mkjob: @_\n";
    exit 2;
}

