#!/usr/bin/perl

use strict;
use warnings;

use MARC::File::USMARC;
use File::Kvpar;
use Digest::MD5 qw(md5_hex);
use POSIX qw(strftime);

use C4::Context;
use C4::Charset;
use C4::Biblio;
use C4::ImportBatch;
use C4::Items;
use C4::Matcher;

sub usage;
sub fatal;
sub marciter(&$);

(my $prog = $0) =~ s{.+/}{};
(my $cmd = $prog) =~ s{^ils\.}{};

my $root = $ENV{'VBLR_ROOT'} || glob('~/proj');

&{ __PACKAGE__->can('cmd_'.$cmd) or usage };

# --- Commands

sub cmd_stage {
    usage() if @ARGV < 1;
    my $batch = argv2batch(@ARGV);
    stage_batch($batch);
}

sub cmd_load {
    usage() if @ARGV < 1;
    my $batch = argv2batch(@ARGV);
    if ($batch->{'record_type'} eq 'items') {
        load_items($batch);
    }
    elsif (defined (my $staged_batch = find_staged_batch($batch))) {
        load_staged_batch($staged_batch, $batch);
    }
    else {
        load_unstaged_batch($batch);
    }
}

sub cmd_match {
    usage() if @ARGV < 1;
    my $batch = argv2batch(@ARGV);
    match_batch($batch);
}

sub cmd_results {
    my $params = argv2hash(@ARGV);
    my $log = $params->{'log'} or fatal "log file not specified";
    exec('cat', $log);
}

# --- Functions

sub match_batch {
    my ($batch) = @_;
    my ($file_name, $matcher_id, $marc_flavor, $char_encoding, $record_type)
        = @$batch{qw(file_name matcher_id marc_flavor char_encoding record_type)};
    my $matcher = $matcher_id
        ? ( C4::Matcher->fetch($matcher_id) || fatal "no such matcher: $matcher_id" )
        : usage('no matcher specified');
    my $n = 0;
    my $max_matches = $batch->{'max_matches'} || 3;
    marciter {
        my ($marcref) = @_;
        $n++;
        my $marc_record = MARC::Record->new_from_usmarc($$marcref);
        my @matches = $matcher->get_matches($marc_record, $max_matches);
        if (@matches) {
            my @fields;
            $marc_record->delete_fields('999');
            foreach (@matches) {
                my $field = MARC::Field->new('999', '', '', 'c' => $_);
                push @fields, $field;
            }
            $marc_record->append_fields(@fields);
            print $marc_record->as_usmarc;
        }
        else {
            print $$marcref;
        }
    } $file_name;
}

sub stage_batch {
    my ($batch) = @_;
    my ($file_name, $matcher_id, $marc_flavor, $char_encoding, $record_type)
        = @$batch{qw(file_name matcher_id marc_flavor char_encoding record_type)};
    my $matcher = $matcher_id
        ? ( C4::Matcher->fetch($matcher_id) || fatal "no such matcher: $matcher_id" )
        : undef;
    my $count = marccount($file_name);
    fatal "no records to stage" if $count == 0;
    my $batch_id = AddImportBatch($batch);
    my $n = 0;
    marciter {
        my ($marcref) = @_;
        $n++;
        my $update_counts = ($n == $count);
        my ($marc_record, $charset_guessed, $char_errors) = MarcToUTF8Record($$marcref, $marc_flavor, $char_encoding);
        SetUTF8Flag($marc_record);
        if ($record_type eq 'biblio') {
            my $import_record_id = AddBiblioToBatch($batch_id, $n, $marc_record, $char_encoding, int(rand 99999), $update_counts);
            if ($batch->{'item_action'} ne 'ignore') {
                AddItemsToImportBiblio($batch_id, $import_record_id, $marc_record, $update_counts);
            }
        }
        elsif ($record_type eq 'auth') {
            my $import_record_id = AddAuthToBatch($batch_id, $n, $marc_record, $char_encoding, int(rand 99999), $update_counts, $marc_flavor);
        }
    } $file_name;
    if ($matcher) {
        my $nmatches = BatchFindDuplicates($batch_id, $matcher);
        print STDERR "matched: $nmatches record(s)\n" if -t STDERR;
    }
    SetImportBatchStatus($batch_id, 'staged');
    print STDERR "staged: batch $batch_id ($n records)\n" if -t STDERR;
}

sub load_staged_batch {

    fatal "loading a staged batch is not yet implemented";

    my ($staged_batch, $batch) = @_;
    my ($fhlog, $logfile) = open_log_file($batch, '>');
    # TODO Add logging
    my ($u, $b, $j) = @$batch{qw(update batch job)};
    my $batch_id = $staged_batch->{'import_batch_id'};
    my $framework = '';
    my ($num_added, $num_updated, $num_items_added, $num_items_replaced, $num_items_errored, $num_ignored) =
        BatchCommitRecords($batch_id, $framework);
    1;
}

sub load_unstaged_batch {
    my ($batch) = @_;
    my ($fhlog, $logfile) = open_log_file($batch, '>');
    my $framework = '';
    my ($file_name, $matcher_id, $marc_flavor, $char_encoding, $record_type, $profile)
        = @$batch{qw(file_name matcher_id marc_flavor char_encoding record_type profile)};
    my $count = marccount($file_name);
    my $n = 0;
    print $fhlog <<"EOS";
log $logfile
input $file_name
profile $profile

EOS
    marciter {
        my ($marcref) = @_;
        $n++;
        my $update_counts = ($n == $count);
        my ($marc_record, $charset_guessed, $char_errors) = MarcToUTF8Record($$marcref, $marc_flavor, $char_encoding);
        SetUTF8Flag($marc_record);
        if ($record_type eq 'biblio') {
            my ($biblionumber, $biblioitemnumber, %opt);
            $opt{'defer_marc_save'} = 1 if $batch->{'item_action'} ne 'ignore';
            ($biblionumber, $biblioitemnumber) = AddBiblio($marc_record, $framework, \%opt);
            print $fhlog "$n\nB add $biblionumber\n";
            if ($batch->{'item_action'} ne 'ignore') {
                my ($itemnumbers, $errors) = AddItemBatchFromMarc($marc_record, $biblionumber, $biblioitemnumber, '' );
                C4::Biblio::_strip_item_fields($marc_record, '');
                ModBiblioMarc($marc_record, $biblionumber, $framework);
                print $fhlog "I add $_\n" for @$itemnumbers;
            }
            print $fhlog "\n";
        }
    } $file_name;
    my $fhjob = open_job_file($batch, '>');
    print $fhjob job_info(
        'job' => $batch->{'job'},
        'file' => $file_name,
        'profile' => $profile,
    );
}

sub marccount {
    my ($f) = @_;
    my $n = 0;
    marciter { $n++ } $f;
    return $n;
}

sub marciter(&$) {
    my ($code, $f) = @_;
    my $fh;
    if (ref $f) {
        $fh = $f;
    }
    else {
        open $fh, '<', $f or fatal "open $f: $!";
    }
    local $/ = "\x1d";
    while (defined(my $marc = <$fh>)) {
        $code->(\$marc);
    }
    close $fh or fatal "close $f: $!";
}

sub argv2batch {
    my %batch = (
        'purpose'        => 'add',
        'record_type'    => 'biblio',
        'description'    => undef,
        'marc_flavor'    => 'MARC21',
        'char_encoding'  => 'UTF-8',
        'import_status'  => 'staging',
        'batch_type'     => 'batch',
        'item_action'    => 'always_add',
        'profile'        => 'default',
        %{ argv2hash(@_) },
        # Determined from purpose
        # 'overlay_action' => 'create_new',
        # 'nomatch_action' => 'create_new',
    );
    usage("unknown record type: $batch{record_type}")
        if $batch{record_type} !~ /^(biblio|items|auth)$/;
    $batch{'comments'} = delete $batch{'description'};
    $batch{'file_name'} = delete $batch{'file'}
        or usage("MARC file not specified");
    _apply_profile(\%batch);
    my $purpose = $batch{'purpose'};
    if ($purpose eq 'add') {
        $batch{'overlay_action'} //= 'ignore';
        $batch{'nomatch_action'} //= 'create_new';
    }
    elsif ($purpose eq 'replace') {
        $batch{'overlay_action'} //= 'replace';
        $batch{'nomatch_action'} //= 'ignore';
    }
    elsif ($purpose eq 'delete') {
        fatal("deletes not yet implemented");
    }
    else {
        usage("unrecognized record load purpose $purpose");
    }
  # foreach (qw(project update batch)) {
  #     fatal("no $_ specified") if !defined $batch{$_};
  # }
    if ($batch{'match_by'}) {
        $batch{'matcher_id'} = C4::Matcher::GetMatcherId($batch{'match_by'})
            or fatal("no such matcher: $batch{'match_by'}");
    }
    return \%batch;
}

sub argv2hash {
    my %hash;
    foreach (@_) {
        usage("unrecognized parameter: $_") if !/^([-\w]+)=(.*)$/;
        my ($k, $v) = ($1, $2);
        $k =~ tr/-/_/;
        $hash{$k} = $v;
    }
    return \%hash;
}

sub _apply_profile {
    my ($batch) = @_;
    my $profile = $batch->{'profile'} //= 'default';
    open my $fh, '<', "$root/profiles/$profile.kv";
    while (<$fh>) {
        next if /^\s*(?:#.*)?$/;  # Skip blank lines and comments
        /^(\S+) (.*)$/
            or fatal "invalid line in profile $profile: $_";
        my ($k, $v) = ($1, $2);
        $k =~ tr/-/_/;
        $batch->{$k} = $v;
    }
    return $batch;
}

sub find_staged_batch {
    my ($batch) = @_;
    my $j = $batch->{'job'} or return;
    my @all_batches = @{ GetAllImportBatches() };
    my ($staged_batch, @etc) = grep {
        $_->{'batch_type'} eq 'batch'
        &&
        $_->{'import_status'} eq 'staged'
        &&
        $_->{'file_name'} eq $batch->{'file_name'}
        #$_->{'file_name'} =~ m{(^|/)$j([/.]|$)}
    } @all_batches;
    fatal("multiple batches staged for $batch->{'file_name'}") if @etc;
    return $staged_batch;
### my $file_name = "%/$j/records.mrc";
### my $dbh = C4::Context->dbh;
### my $sth = $dbh->prepare_cached("SELECT * FROM import_batches WHERE import_status = 'staged' AND file_name LIKE ?");
### $sth->bind_param(1, $file_name);
### $sth->execute;
### my $result = $sth->fetchrow_hashref;
### $sth->finish;
### return $result;
}

sub load_items {
    my ($batch) = @_;
    my $file = $batch->{'file_name'}
        or fatal "no file specified";
    my $format = $batch->{'format'};
    if (!defined $format) {
        $format = ($file =~ /\.mrc$/i) ? 'MARC21'
                : ($file =~ /\.fkb$/i) ? 'flokb'
                : fatal "unrecognized format: file $file";
    }
    my $purpose = $batch->{'purpose'};
    if ($purpose eq 'add') {
        if ($format eq 'MARC21') {
            add_items_from_marc($batch);
        }
        elsif ($format eq 'flokb') {
            add_items_from_flokb($batch);
        }
    }
    elsif ($purpose eq 'delete') {
        if ($format eq 'MARC21') {
            delete_items_from_marc($batch);
        }
        elsif ($format eq 'flokb') {
            delete_items_from_flokb($batch);
        }
    }
    else {
        fatal "replacing items not yet implemented";
    }
}

sub add_items_from_marc {
    my ($batch) = @_;
    my $file = $batch->{'file_name'};
    my $marc_batch = MARC::Batch->new('USMARC', $file);
    my $n = 0;
    my $fhlog = open_log_file($batch, '>');
    while (my $record = $marc_batch->next) {
        $n++;
        print $fhlog $n, "\n";
        my $ok;
        eval {
            my $biblionumber = marc_record_biblionumber($record)
                or fatal "no biblionumber";
            print $fhlog "B mat $biblionumber\n";
            my $biblioitemnumber = GetBiblioItemByBiblioNumber($biblionumber);
            my ($itemnumbers, $errors) = AddItemBatchFromMarc($record, $biblionumber, $biblioitemnumber, '');
            print $fhlog map { "I add $_\n" } @$itemnumbers;
            $ok = 1;
        };
        if (my @warnings = $marc_batch->warnings) {
            print STDERR "$prog: add items: warning: file $file record $n:\n";
            print STDERR map { "| $_\n" } @warnings;
        }
        if (!$ok) {
            my @errlines = split /\n/, $@;
            print STDERR "$prog: add items: error: file $file record $n:\n";
            print STDERR map { "| $_\n" } @errlines;
            print $fhlog "E err $errlines[0]\n";
        }
        print $fhlog "\n";
    }
    my $fhjob = open_job_file($batch, '>');
    print $fhjob job_info(
        'job' => $batch->{'job'},
        'file' => $file,
        'profile' => $batch->{'profile'},
    );
}

sub add_items_from_flokb {
    my ($batch) = @_;
    my $file = $batch->{'file_name'};
    my $dbh = C4::Context->dbh;
    my $fhlog = open_log_file($batch, '>');
    open my $fh, '<', $file or fatal "open $file: $!";
    my $iter = File::Kvpar->new($fh)->iter;
    my $n = 0;
    while (my $item = &$iter) {
        $n++;
        print $fhlog $n, "\n";
        my $ok;
        eval {
            my $biblionumber = delete $item->{'biblionumber'} or fatal "no biblionumber";
            my $action       = delete $item->{'action'};
            next if defined $action && $action ne 'add';
            print $fhlog "B mat $biblionumber\n";
            my (undef, $biblioitemnumber, $itemnumber) = AddItem($item, $biblionumber, $dbh, '');
            print $fhlog "I add $itemnumber\n";
            $ok = 1;
        };
        if (!$ok) {
            my @errlines = split /\n/, $@;
            print STDERR "$prog: add items: error: file $file record $n:\n";
            print STDERR map { "| $_\n" } @errlines;
            print $fhlog "E err $errlines[0]\n";
        }
        print $fhlog "\n";
    }
    my $fhjob = open_job_file($batch, '>');
    print $fhjob job_info(
        'job' => $batch->{'job'},
        'file' => $file,
        'profile' => $batch->{'profile'},
    );
}

sub delete_items_from_marc {
    fatal "deleting items not yet implemented";
    my ($batch) = @_;
    my $file = $batch->{'file_name'};
    my $marc_batch = MARC::Batch->new('USMARC', $file);
    my $n = 0;
    my $fhlog = open_log_file($batch, '>');
    while (my $record = $marc_batch->next) {
        $n++;
        print $fhlog $n, "\n";
        my $ok;
        eval {
            my @items_to_delete = map { field2item($_) } $record->field('952');
            next if !@items_to_delete;
            my (%items_to_delete_by_branch, %kohabybranch);
            foreach my $item (@items_to_delete) {
                my $branch = $item->{'homebranch'};
                push @{ $items_to_delete_by_branch{$branch} ||= [] }, $item;
            }
            my $biblionumber = marc_record_biblionumber($record)
                or fatal "no biblionumber";
            print $fhlog "B mat $biblionumber\n";
            my @items_in_koha = biblio_items($biblionumber);
            foreach my $item (@items_in_koha) {
                my $branch = $item->{'homebranch'};
                push @{ $kohabybranch{$branch} ||= [] }, $item;
            }
            my @itemnumbers_deleted;
            1;
            print $fhlog map { "I del $_\n" } @itemnumbers_deleted;
            $ok = 1;
        };
        if (my @warnings = $marc_batch->warnings) {
            print STDERR "$prog: delete items: warning: file $file record $n:\n";
            print STDERR map { "| $_\n" } @warnings;
        }
        if (!$ok) {
            my @errlines = split /\n/, $@;
            print STDERR "$prog: delete items: error: file $file record $n:\n";
            print STDERR map { "| $_\n" } @errlines;
            print $fhlog "E err $errlines[0]\n";
        }
        print $fhlog "\n";
    }
    my $fhjob = open_job_file($batch, '>');
    print $fhjob job_info(
        'job' => $batch->{'job'},
        'file' => $file,
        'profile' => $batch->{'profile'},
    );
}

sub marc_record_biblionumber {
    my ($record) = @_;
    my ($bnum) = $record->subfield('999', 'c');
    return $bnum if defined $bnum && $bnum =~ /^[0-9]+$/;
    my $f001 = $record->field('001');
    return if !$f001;
    $bnum = $f001->data;
    return $bnum if defined $bnum && $bnum =~ /^[0-9]+$/;
}

sub makedir {
    foreach my $dir (@_) {
        -d $dir || mkdir($dir) || fatal "Can't mkdir $dir: $!";
    }
    return 1;
}

sub job_info {
    my %job = @_;
    $job{'date'} ||= strftime('%Y%m%dT%H%M%S', localtime);
    my @out = ("job " . delete $job{'job'});
    foreach (sort keys %job) {
        push @out, "$_ $job{$_}";
    }
    return map { $_, "\n" } @out;
}

sub open_job_file {
    my ($batch, $mode) = @_;
    return open_batch_file($batch, 'job', $mode);
}
    
sub open_log_file {
    my ($batch, $mode) = @_;
    return open_batch_file($batch, 'log', $mode);
}

sub open_batch_file {
    my ($batch, $ext, $mode) = @_;
    $mode ||= '<';
    my $file = $batch->{$ext . '_file'};
    if (!defined $file) {
        my ($u, $b, $j) = @$batch{qw(update batch job)};
        my $outdir = sprintf('updates/%s/batches/%s/jobs/%s/output', $u, $b, $j);
        makedir($outdir);
        $file = "$outdir/$j.$ext";
    }
    open my $fh, $mode, $file or fatal "open $file: $!";
    return wantarray ? ($fh, $file) : $fh;
}

sub make_barcode {
    my ($batch, $item_number) = @_;
    my ($p, $u, $b) = @$batch{qw(project update batch)};
    my $md5 = md5_hex(join ':', $p, $u, $b, $item_number);
    return substr('k#'.$md5, 0, 20);
}

sub field2item {
    my ($field) = @_;
    my %mapping = qw(
        8 ccode
        a homebranch
        b holdingbranch
        c location
        o itemcallnumber
        p barcode
        u uri
        y itype
        z itemnotes
    );  # ... 0 withdrawn 1 itemlost 2 cn_source 3 materials 4 damaged ...
    my %item = map {
        $mapping{$_} => $field->subfield($_)
    } sort keys %mapping;
    return \%item;
}

sub usage {
    print STDERR "$prog: $_\n" for @_;
    print STDERR "usage: $prog KEY=VAL...\n";
    exit 1;
}

sub fatal {
    print STDERR "ils.load: @_\n";
    exit 2;
}

