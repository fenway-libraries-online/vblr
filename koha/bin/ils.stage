#!/usr/bin/perl

use strict;
use warnings;

use MARC::File::USMARC;

use C4::Context;
#use C4::Biblio;
use C4::ImportBatch;
use C4::Matcher;

usage() if @ARGV < 1;

my $batch = argv2batch(@ARGV);
my $parse_items = $batch{'item_action'} ne 'ignore';
my $batch_id = AddImportBatch($batch);

$n = 0;
while (<$fh>) {
    $n++;
    my ($marc_record, $charset_guessed, $char_errors) = MarcToUTF8Record($_, $marc_flavor, $char_encoding);
    SetUTF8Flag($marc_record);
    if ($rec_type eq 'biblio') {
        AddBiblioToBatch($batch_id, $n, $marc_record, $encoding, int(rand 99999), 0);
        if ($batch{'item_action'} ne 'ignore') {
            AddItemsToImportBiblio($batch_id, $import_record_id, $marc_record, 0);
        }
    }
    elsif ($record_type eq 'auth') {
        AddAuthToBatch($batch_id, $n, $marc_record, $encoding, int(rand 99999), 0, $marc_flavor);
    }
}

print STDERR "staged: batch $batch_id ($n records)\n" if -t STDERR;



sub argv2batch {
    my %batch = (
        'import_status'  => 'staging',
        'batch_type'     => 'batch',
        'record_type'    => 'biblio',
        'comments'       => '',
        'overlay_action' => 'create_new',
        'nomatch_action' => 'create_new',
        'item_action'    => 'always_add',
    );
    my $char_encoding = 'UTF-8';
    my $marc_flavor = 'MARC21';
    my %enc = (
        'a' => 'UTF-8',
        ' ' => 'MARC8',
    );
    my %rtype = (
        ( map { $_ => 'biblio'  } qw(a c d e f g i j k m o p r t) ),
        ( map { $_ => 'holdings'} qw(u v x y) ),
        'z' => 'auth',
    );
    my %meta;
    foreach (@_) {
        $meta{'project'} = $1, next if /^project=(.+)$/;
        $meta{'update' } = $1, next if /^update=(.+)$/;
        $meta{'batch'  } = $1, next if /^batch=(.+)$/;
        $meta{'job'    } = $1, next if /^job=(.+)$/;
        $batch{'record_type'   } = $1, next if /^rectype=(biblio|auth)$/;
        $batch{'comments'      } = $1, next if /^description=(.*)$/;
        if (/^purpose=add$/) {
            $batch{'overlay_action'} = 'create_new';
            $batch{'nomatch_action'} = 'create_new';
        }
        elsif (/^purpose=replace$/) {
            $batch{'overlay_action'} = 'replace';
            $batch{'nomatch_action'} = 'ignore';
            next;
        }
        elsif (/^purpose=delete$/) {
            fatal("deletes not yet implemented");
        }
        else {
            usage("unrecognized parameter: $_");
        }
    }
    foreach (qw(project update batch)) {
        fatal("no $_ specified") if !defined $meta{$_};
    }
    return \%batch;
}
