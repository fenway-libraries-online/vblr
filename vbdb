#!/usr/bin/perl

use strict;
use warnings;

sub usage;
sub warning;
sub fatal;

use DBI;
use Digest;
use MARC::Loop qw(marcparse TAG VALREF);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub db_transact(&);

my $root = $ENV{'VBLR_ROOT'};
my $dbh;
my $trxlevel = 0;

# Cached objects
my ($group, $project, $update, $batch, $job, $file, $purpose);
my (%group, %project, %update, %job, %file, %record, %load_results);

@ARGV = qw(shell) if !@ARGV;
my $cmd = shift @ARGV;
$cmd =~ tr/-/_/;
my $sub = __PACKAGE__->can("cmd_$cmd") || usage;
$sub->();

# --- Command handlers

sub cmd_add_project {
    my %arg = orient();
    my $g = $arg{'group'};
    my $p = $arg{'project'} or fatal "no project specified";
    !$project or fatal "project $p already exists";
    if (!$g) {
        ($g = $p) =~ s{/.+}{};
        $group = group($g);
    }
    db_transact {
        $project = db_insert_project(%arg);
    };
    print STDERR "project added: $p\n";
}

sub cmd_add_file {
    my %arg = orient();
    my $f = $arg{'file'} or fatal "no file specified";
    -e $f or fatal "can't find file $f to add it";
    my $n;
    db_transact {
        $file = db_insert_file(%arg);
        $n = db_insert_records(%arg);
    };
    print STDERR "file added: $f (records: $n)\n";
}

sub cmd_add_update {
    my %arg = orient();
    my $p = $arg{'project'} or fatal "no project specified";
    my $u = $arg{'update'} or fatal "no update specified";
    !defined $update or fatal "update $u already exists";
    my $n;
    db_transact {
        $arg{'file'} = glob("$root/$p/updates/$u/*.mrc");
        $file = db_insert_file(%arg);
        $update = db_insert_update(%arg);
        $n = db_insert_records(%arg);
    };
    print STDERR "update added: $u in $p (records: $n)\n";
}

sub cmd_add_job {
    my %arg = orient();
    my $j = $arg{'job'} or fatal "no job specified";
    !defined $job or fatal "job $j already exists";
    db_transact {
        $job = db_insert_job(%arg);
    };
    print STDERR "job added: $j\n";
}

sub cmd_add_load_results {
    my %arg = orient();
    my %code2action = qw(
        add A
        rep R
        del D
        mat M
        dis X
        err E
        unm N
        unr U
    );
    $project or fatal "not in a project";
    $update or fatal "not in an update";
    $job or fatal "no job";
    my $f = $arg{'file'} or fatal "no file specified";
    $file ||= file($f);
    my $job_id = job_id($job);
    my $offset = 0;
    if (defined $arg{'batch'})
        $arg{'batch'} =~ /^([1-9][0-9]*)/ or fatal "unparseable batch: $arg{'batch'}";
        $offset = $1 - 1;
    }
    local $/ = '';
    my $log_header = <STDIN>;
    my $sql = 'SELECT id, record_num FROM records WHERE file_id = ?';
    my $sth = $dbh->prepare($sql);
    my @rec_id;
    while (my ($id, $n) = $sth->fetchrow_array) {
        $rec_id[$n] = $id;
    }
    $sth->finish;
    $sql = 'INSERT INTO load_results (job_id, record_id, action, ils_num) VALUES (?, ?, ?, ?)';
    $sth = $dbh->prepare($sql);
    while (<STDIN>) {
        my ($n, @results) = split /\n/;
        $n += $offset;
        my $r = $rec_id[$n] or next;
        my ($action, $bnum) = ('?', undef);
        foreach (@results) {
            if (/^B (...) ([0-9]+)$/) {
                $action = $code2action{$1} ||= '?'.$1;
                $bnum = $2 if $1 ne 'unr';
            }
        }
        $sth->execute($job_id, $r, $action, $inum);
        # Commit every 1000 records
        if (($n % 1000) == 0) {
            db_end();
            db_begin();
        }
    }
}

# --- Database functions

sub db_begin {
    $dbh->begin_work if !$trxlevel++;
}

sub db_end {
    $dbh->commit if !--$trxlevel;
}

sub db_transact(&) {
    my ($sub) = @_;
    my $ok;
    eval {
        db_begin();
        $sub->();
        db_end();
        $ok = 1;
    };
    return if $ok;
    my $errstr = $dbh->errstr // $@;
    $dbh->rollback;
    fatal "transaction failed: $errstr";
}

sub db_insert_project {
    my %arg = @_;
    my $p = $arg{'project'};
    my $phash = kvread("$root/$p/project.kv");
    my $pcode = $phash->{'id'};
    my $descrip = $phash->{'description'} // '';
    my $freq = $phash->{'frequency'};
    my $ongoing = $freq =~ /^one-?time$/ ? 0 : 1;
    (my $code = $p) =~ s{.+/}{};
    (my $status = glob "$root/$p/\@*") =~ s{.+[@]}{};
    my $t = time;
    my $group_id = group_id($group);
    my $sql = 'INSERT INTO projects (code, pcode, status, description, ongoing, frequency, created, group_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)';
    my $sth = $dbh->prepare($sql);
    $sth->execute($code, $pcode, $status, $descrip, $ongoing, $freq, $t, $group_id);
    my $project_id = $dbh->last_insert_id('', '', '', '');
    return $project{$p} = {
        'id' => $project_id,
        'code' => $code,
        'pcode' => $pcode,
        'status' => $status,
        'description' => $descrip,
        'ongoing' => $ongoing,
        'frequency' => $freq,
        'created' => $t,
        'group_id' => $group_id,
    };
}

sub db_insert_file {
    my %arg = @_;
    my ($f, $p) = @arg{qw(file purpose)};
    my $sql = 'INSERT INTO files (path, purpose, num_records, md5sum) VALUES (?, ?, ?, ?)';
    my $sth = $dbh->prepare($sql);
    $sth->execute($f, $p, 0, '?');  # We'll calculate num_records and md5sum when we insert the records
    my $file_id = $dbh->last_insert_id('', '', '', '');
    return $file{$file_id} = {
        'id' => $file_id,
        'path' => $f,
        'purpose' => $p,
        'num_records' => 0,
        'md5sum' => '?',
    };
}

sub db_insert_job {
    my %arg = @_;
    my $sql = 'INSERT INTO jobs (jcode, first, last, file_id, update_id) VALUES (?, ?, ?, ?, ?)';
    my $j = job_id($job);
    my ($b, $e) = split /-/, ($arg{'batch'} || die "job batch range not specified: $j");
    my $f = $file->{'id'};
    my $u = $update ? $update->{'id'} : undef;
    my $sth = $dbh->prepare($sql);
    $sth->execute($j, $b, $e, $f, $u);
    my $id = $dbh->last_insert_id('', '', '', '');
    return $job{$id} = {
        'id' => $id,
        'jcode' => $j,
        'status' => 'new',
        'first' => $b,
        'last' => $e,
        'file_id' => $f,
        'update_id' => $u,
    };
}

sub db_insert_update {
    my %arg = @_;
    my $t = time;
    my $sql = 'INSERT INTO updates (code, purpose, created, project_id, file_id) VALUES (?, ?, ?, ?, ?)';
    my $sth = $dbh->prepare($sql);
    $sth->execute($arg{'update'}, $arg{'purpose'}, $t, project_id($project), file_id($arg{'file'}));
    my $update_id = $dbh->last_insert_id('', '', '', '');
    return $update{$update_id} = {
        'id' => $update_id,
        'code' => $arg{'update'},
        'purpose' => $arg{'purpose'},
        'project' => $arg{'project'},
        'file' => $arg{'file'},
    };
}

sub db_insert_records {
    my %arg = @_;
    my $f = $file->{'path'};
    my $file_id = file_id($f);
    my $sql = 'INSERT INTO records (file_id, record_num, oclc_num) VALUES (?, ?, ?)';
    my $sth = $dbh->prepare($sql);
    open my $fh, '<', $f or fatal "open $f: $!";
    my %want = map { $_ => 1 } qw(001 003 035);
    my $n = 0;
    my $md5 = Digest->new('MD5');
    local $/ = "\x1d";
    while (defined (my $marc = <$fh>)) {
        $n++;
        $md5->add($marc);
        my ($leader, $fields) = marcparse(\$marc, 'only' => \%want);
        my ($onum, @etc) = sort { $a <=> $b } oclc_numbers(@$fields);
        warning "multiple OCLC numbers in record $n\n" if @etc;
        $sth->execute($file_id, $n, $onum);
        # Commit every 1000 records
        if (($n % 1000) == 0) {
            db_end();
            db_begin();
        }
    }
    $sth->finish;
    $sql = 'UPDATE files SET num_records = ?, md5sum = ? WHERE id = ?';
    $sth = $dbh->prepare($sql);
    $sth->execute($n, $md5->hexdigest, $file_id);
    return $n;
}

sub db_insert_load_results {
    my %arg = @_;
}

sub group {
    my ($g) = @_;
    return $g if ref $g;
    my ($sql, @params);
    if ($g =~ /^[0-9]+$/) {
        return $group{$g} if $group{$g};
        $sql = 'SELECT * FROM groups WHERE id = ?';
        @params = ($g);
    }
    else {
        $sql = 'SELECT * FROM groups WHERE code = ?';
        @params = ($g);
    }
    my $sth = $dbh->prepare($sql);
    $sth->execute(@params);
    my ($group) = $sth->fetchrow_hashref;
    $sth->finish;
    die "no such group: $g" if !$group;
    return $group{$group->{'id'}} = $group;
}

sub project {
    my ($p) = @_;
    return $p if ref $p;
    my ($sql, @params);
    if ($p =~ /^[0-9]+$/) {
        return $project{$p} if $project{$p};
        $sql = 'SELECT * FROM projects WHERE id = ?';
        @params = ($p);
    }
    elsif ($p =~ m{^([^/]+)/([^/]+)$}) {
        $sql = 'SELECT p.* FROM groups g, projects p WHERE g.id = p.group_id AND g.code = ? AND p.code = ?';
        @params = ($1, $2);
    }
    elsif ($p =~ m{^p.{9}$}) {
        $sql = 'SELECT * FROM projects WHERE pcode = ?';
        @params = ($p);
    }
    my $sth = $dbh->prepare($sql);
    $sth->execute(@params);
    my ($project) = $sth->fetchrow_hashref;
    $sth->finish;
    die "no such project: $p" if !$project;
    return $project{$project->{'id'}} = $project;
}

sub project_update {
    my ($p, $u) = @_;
    return $u if ref $u;
    my ($sql, @params);
    my $project = project($p)->{'id'};
    $p = $project->{'id'};
    if ($u =~ /^[0-9]+$/) {
        return $update{$u} if $update{$u};
        $sql = 'SELECT u.* FROM projects p, updates u, WHERE u.project_id = p.id AND p.id = ? AND u.id = ?';
        @params = ($p, $u);
    }
    else {
        $sql = 'SELECT u.* FROM projects p, updates u, WHERE u.project_id = p.id AND p.id = ? AND u.code = ?';
        @params = ($p, $u);
    }
    my $sth = $dbh->prepare($sql);
    $sth->execute(@params);
    my ($update) = $sth->fetchrow_hashref;
    $sth->finish;
    die "no such update: $u (in project $project->{'code'})" if !$update;
    return $update{$update->{'id'}} = $update;
}

sub job {
    my ($j) = @_;
    return $j if ref $j;
    my ($sql, @params);
    if ($j =~ /^[0-9]+$/) {
        return $job{$j} if $job{$j};
        $sql = 'SELECT * FROM jobs WHERE id = ?';
        @params = ($j);
    }
    elsif ($j =~ /^j.{9}$/) {
        $sql = 'SELECT * FROM jobs WHERE jcode = ?';
        @params = ($j);
    }
    else { die }
    my $sth = $dbh->prepare($sql);
    $sth->execute(@params);
    my ($job) = $sth->fetchrow_hashref;
    $sth->finish;
    die "no such job: $j" if !$job;
    return $job{$job->{'id'}} = $job;
}

sub file {
    my ($f) = @_;
    return $f if ref $f;
    my ($sql, @params);
    if ($f =~ /^[0-9]+$/) {
        return $file{$f} if $file{$f};
        $sql = 'SELECT * FROM files WHERE id = ?';
        @params = ($f);
    }
    else {
        $sql = 'SELECT * FROM files WHERE path = ?';
        @params = ($f);
    }
    my $sth = $dbh->prepare($sql);
    $sth->execute(@params);
    my $files = $sth->fetchall_arrayref({});
    die "multiple files: $f" if @$files > 1;
    my ($file) = @$files;
    $file{$file->{'id'}} = $file;
    return shift @$files;
}

sub record {
    my ($r, $f) = @_;
    return $r if defined $r;
    my ($sql, @params);
    if ($r =~ /^[0-9]+$/) {
        if (defined $f) {
            $sql = 'SELECT * FROM records WHERE file_id = ? AND record_num = ?';
            @params = (file_id($f));
        }
        else {
            return $record{$r} if $record{$r};
            $sql = 'SELECT * FROM records WHERE id = ?';
            @params = ($r);
        }
    }
    elsif ($r =~ /^oclc:([0-9]+)$/) {
        $sql = 'SELECT * FROM records WHERE oclc_num = ?';
        @params = ($1);
    }
    else { die }
    my $sth = $dbh->prepare($sql);
    $sth->execute(@params);
    my ($record) = $sth->fetchrow_hashref;
    $sth->finish;
    die "no such record: $r (in file $f)" if !$record;
    return $record{$record->{'id'}} = $record;
}

sub group_id {
    my ($g) = @_;
    return $g->{'id'} if ref $g;
    return $g if $g =~ /^[0-9]+$/;
    return group($g)->{'id'};
}

sub project_id {
    my ($p) = @_;
    return $p->{'id'} if ref $p;
    return $p if $p =~ /^[0-9]+$/;
    return project($p)->{'id'};
}

sub file_id {
    my ($f) = @_;
    return $f->{'id'} if ref $f;
    return $f if $f =~ /^[0-9]+$/;
    return file($f)->{'id'};
}

sub record_id {
    my ($r, $f) = @_;
    return $r->{'id'} if ref $r;
    return $r if !defined $f && $r =~ /^[0-9]+$/;
    return record($r)->{'id'};
}

# --- Other functions

sub orient {
    $root = $ENV{'VBLR_ROOT'};
    my $dbfile = 'vbdb.sqlite3';
    my @env_keys = qw(group project update batch job file purpose);
    my %env = map { $_ => $ENV{'VBLR_' . uc($_)} } @env_keys;
    # Don't attempt to instantiate $file from $ENV{'VBLR_FILE'}
    GetOptions(
        # General
        'r|root=s'    => \$root,
        'd|db-file=s' => \$dbfile,
        # Environment/context
        'g|group=s'   => \$env{'group'},
        'p|project=s' => \$env{'project'},
        'u|update=s'  => \$env{'update'},
        'b|batch=s'   => \$env{'batch'},
        'j|job=s'     => \$env{'job'},
        'P|purpose=s' => \$env{'purpose'},
    ) or usage;
    ($group, $project, $update, $batch, $job, undef, $purpose) = @env{@env_keys};
    chdir($root) or fatal "chdir $root: $!";
    $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", '', '', {
        'FetchHashKeyName' => 'NAME_lc',
    });
    if ($project) {
        ($group ||= $project) =~ s{/.+}{};
        $group = eval { group($group) };
        $project = eval { project($project) };
        $update = eval { project_update($project, $update) } if $update;
    }
    $job = eval { job($job) } if $job;
    return %env;
}

sub kvread {
    my ($f) = @_;
    open my $fh, '<', $f or fatal "open $f: $!";
    my %hash;
    while (<$fh>) {
        next if /^\s*(?:#.*)?$/;  # Skip blank lines and comments
        chomp;
        /^(\S+)\s+(.*)$/ or fatal "unrecognized line in $f: $_";
        $hash{$1} = $2;
    }
    return \%hash;
}

sub oclc_numbers {
    my @f035 = grep { $_->[TAG] eq '035' } @_;
    my @onums;
    foreach (@f035) {
        my $str = ${ $_->[VALREF] };
        next if $str !~ /\x1fa\(OCoLC\)[^1-9]*([0-9]+)/;
        push @onums, $1;
    }
    return @onums if @onums;
    my ($f003) = grep { $_->[TAG] eq '003' } @_;
    return if !$f003 || ${ $f003->[VALREF] } ne 'OCoLC';
    my ($f001) = grep { $_->[TAG] eq '001' } @_;
    return if !$f001 || ${ $f001->[VALREF] } !~ /([1-9][0-9]*)/;
    return ($1);
}

sub usage {
    print STDERR "usage: vbdb COMMAND [ARG...]\n";
    exit 1;
}

sub warning {
    print STDERR "vbdb: warning: @_\n";
}

sub fatal {
    print STDERR "vbdb: @_\n";
    exit 2;
}
